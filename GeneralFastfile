fastlane_version "2.59.0"

default_platform :ios


desc "Run unit tests"
lane :run_test do
	git_reset_changes
	clear_derived_data
	update_pods
  scan
	slather
end

desc "Submit a new Crashlytics (Stage server) build from provided/develop branch with badge"
lane :run_stage do |options|
  branch = options[:branch]
  checkout_if_needed(options[:builder], branch)

  build_crashlytics(branch || git_branch, "stage", options[:build_number])
end


def checkout_if_needed(builder, branch)
  if builder != "jenkins" && branch != nil
    reset_git_repo
    git_checkout branch
  end
end

def build_crashlytics(branch, env, build_number)
  UI.header "Building for branch: #{git_branch} environment: #{env}"
  ensure_git_status_clean
  set_build_number_if_needed(build_number)
  clear_derived_data
  update_pods
  fullfill_plists_with_configs
  enable_firebase_debug_mode
  set_adhoc_provisioning_profiles
  commit_hash = last_git_commit[:abbreviated_commit_hash]
  message = nil
	case env
	when "stage"
		add_badge(shield: "stage-#{get_version}-orange", no_badge: true)
    gym(
      scheme: "Stage",
      export_method: "ad-hoc",
      configuration: "ReleaseStage"
      )
    message = "üéâ Stage build is ready to be tested #{get_version}, #{branch} üéâ"
    notes = "Branch: #{branch}\nHash: #{commit_hash}\nUpload time: #{upload_time}\nServer: Staging"
  when "prod"
    add_badge(shield: "prod-#{get_version}-orange", no_badge: true)
    gym(
      scheme: "Prod",
      export_method: "ad-hoc",
      configuration: "ReleaseProd"
      )
    message = "üç∑ Prod build is ready to be tested #{get_version}, #{branch} ü•É"
    notes = "Branch: #{branch}\nHash: #{commit_hash}\nUpload time: #{upload_time}\nServer: Prod"
  else
    "You gave me #{options[:env]} -- I have no idea what to do with that."
  end
  crashlytics_upload(notes)

  clean_build_artifacts
  git_reset_changes
  post_to_slack(message: message)
end





def set_build_number_if_needed(build_number)
  if build_number != nil
    increment_build_number_in_plist(
      build_number: build_number,
      target: ENV["MAIN_TARGET"]
    )
    UI.header "Set build number: #{build_number}"
  end
end


def set_adhoc_provisioning_profiles
  update_app_identifier(
    plist_path: ENV["PLIST_PATH"],
    xcodeproj: ENV["XCODE_PROJ"]
    )

  update_provisioning_profile_specifier(
    target: ENV["MAIN_TARGET"],
    new_specifier: ENV["PROVISION_PROFILE_DISTRIBUTION"]
    )
end

def crashlytics_upload(notes)
  crashlytics(
    api_token: ENV["CRASHLYTICS_API_TOKEN"],
    build_secret: ENV["CRASHLYTICS_BUILD_SECRET"],
    emails: ENV["CRASHLYTICS_EMAILS"],
    groups: nil,
    notes: notes, 
    notifications: true
  )

  upload_symbols_to_crashlytics
end

private_lane :post_to_slack do |options|
  progress = options[:progress]
  message = options[:message]
  success = options[:success]
  last_slack_progress = progress
  slack(
    message: "#{progress} #{message}",
    slack_url: ENV["SLACK_CHANNEL_URL"],
    success: success,
    default_payloads: []
    )
end




def update_pods
  cocoapods(
    clean: true,
    try_repo_update_on_error: true
  )
end
